#!/usr/bin/env ruby
# encoding: UTF-8

$VERBOSE = true

while (index = ARGV.index('-I'))
  _, path = ARGV.slice!(index, 2)
  $: << path
end

require 'optparse'

$inspector_port = 0
$exit_not_busy = true
$exit_after = nil
$log_level = 0
$task_args = []

$opts = OptionParser.new(%|Usage: oflow [options] <filename>...

Executes flows defined by the files specified. Files can be
 - Ruby .rb
 - OmniGraffle .graffle
 - Visio .vdx
 - Scalable Vector Graphics .svg
Each file format has a specific expected format.
|)
$opts.on('-s', 'decrease verbosity')                                   { $log_level += 1 }
$opts.on('-v', 'increase verbosity')                                   { $log_level -= 1 }
$opts.on('-b', "don't exit when no longer busy")                       { $exit_not_busy = false }
$opts.on('-e', '--exit-after Integer', Integer, 'exit after <secs>')   { |secs| $exit_after = secs }
$opts.on('-i', '--inspector-port Integer', Integer, 'inspector port')  { |port| $inspector_port = port }
$opts.on('-I', '--load-path String', String, 'load path')              { |path| $: << path }
$opts.on('-r', '--require String', String, 'require gem')              { |req| require req }
$opts.on('-a', '--arg String', String, 'task argument flow:task:option=value'){ |a| $task_args << a }
$opts.on('-h', '--help', 'Show this display')                          { puts $opts.help; Process.exit!(0) }
$opts.on('-t', 'local paths for gems while testing')                   {
  top = ::File.dirname(::File.dirname(__FILE__))
  ['lib', '../oterm/lib', '../oj/ext', '../oj/lib', '../ox/ext', '../ox/lib'].each { |path|
    $: << ::File.join(top, path)
  }
}
files = $opts.parse(ARGV)

require 'oterm'
require 'oflow'

::OFlow::Env.log_level += $log_level

def usage(msg)
  puts msg
  puts $opts.help
  Process.exit!(1)
end

usage('No files specified.') if 0 == files.size()

$oflow_env = ::OFlow::Env.new('')

# Load flow configuration files.
files.each do |file|
  usage("Unknown file type for #{file}.") if (i = file.rindex('.')).nil?
  case file[i + 1..-1].downcase()
  when 'rb'
    load(file)
  when 'graffle'
    OFlow::Graffle.load($oflow_env, file)
  when 'vdx'
    # TBD
    usage("Visio files not implemented yet.")
  when 'svg'
    # TBD
    usage("Scalable Vector Graphics files not implemented yet.")
  else
    usage("Unknown file type for #{file}.")
  end
end

if Logger::Severity::DEBUG >= ::OFlow::Env.log_level
  $oflow_env.debug($oflow_env.describe())
end

inspector = nil
if 0 < $inspector_port
  inspector = OFlow::Inspector.new($inspector_port)
end

$task_args.each { |a|
  path,value = a.split('=')
  fn,tn,o = path.split(':')
  raise "#{fn} is not a flow." if (f = $oflow_env.find_flow(fn)).nil?
  raise "#{tn} is not a task of flow #{fn}." if (t = f.find_task(tn)).nil?
  t.set_option(o, value)
}

$oflow_env.prepare()
$oflow_env.start()

# Exit either when processing is complete or if there is an inspector present it
# can be used to force the exit. It is also possible to not exit at all if there
# is an event receiver or generator in a flow.
if !$exit_after.nil?
  if inspector.nil?
    sleep($exit_after)
  else
    done = Time.now() + $exit_after
    while inspector.running && Time.now() < done
      sleep(1.0)
    end
  end  
elsif $exit_not_busy
  $oflow_env.flush()
else !inspector.nil?
  inspector.join()
end
