;; -*- mode: outline; outline-regexp: " *[-\+]"; indent-tabs-mode: nil -*-

^c^d hide subtree
^c^s show subtree

- todo
 - handle links to other flows
  - validate also

 - get rid of nested
  - env
   - has flows
  - flow
   - has tasks
   - has inputs
  - task
   - has links
    - to tasks/ops
    - to flows/input
  - input
   - name
   - task
   - op

  - use flow-call or flow-wrap task or something instead
   - connect links to input of flow
   - add input connections to flow that connect to links
    - or maybe just use task/link to identify an input
    - probably better to use explicit input (docs and reuse)
   - how to draw this nicely?
  - treat flows as functions
 
 - features
  - .graffle OmniGraffle input
  - 0.7.0
  - .svg vector graphics input
  - .vdx Visio input
  - 0.8.0
  - rubygems graphs example
  - 0.9.0
  - call out using pipe and fork
  - 1.0.0

- graffle reader
 - make simple flow
  - write to file actor to capture completed flows
   - class in test dir, use -I and -r
 - add multiple flow load and link

 - in bin/oflow
 - decide on formats
  - properties
  - text in block

- TBDs



- example
 - rubygems graphs
  - timer
  - fetch
  - persist
  - http
   - GET http://rubygems.org/api/v1/owners/ohler/gems.json
   - GET http://rubygems.org/api/v1/gems/oj.json
   - fetch data
   - fetch page template
   - form page
   - respond

 - data store
  - handles CRUD and simple list
  - tasks
   - receive request and identify action
    - send to correct task (path)
   - insert
    - json encoded object
    - decode header
    - save
    - reply
 - simple (covers all features)
  - receive json request from simple command line input generator
  - send to 2 tasks, get time and get count
  - join back
  - queue to 2+ sleepers (random sleep)
  - reply
